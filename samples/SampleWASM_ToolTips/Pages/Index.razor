@page "/"
@using ToolTips
@inject IJSRuntime js
@inject IToolTipService tooltipState
<h1> <ToolTipAnchor><InlineContent>Hello World !</InlineContent><HelperContent>From France <img src="/France-heart.svg" width=60/> </HelperContent></ToolTipAnchor></h1>
<hr />
<div class="row pl-3 pt-1 pb-3 fs-5">
    <div class="grid-intro">
		<div class="grid-intro-content">  This project is a learning project in order to discover Blazor and C#. This is not at all a finished product, nor a professional offering.
     Any comment, suggestion and help is appreciated. The GitHub repository is here: <a href="https://github.com/LiGass/Blazor.ToolTips" style="color:rgb(154, 10, 233);text-decoration:underline;">Blazor.ToolTips</a><br/>
     This library offers a simple service to provide informations about your content to your users.
     It is composed of three core components
        </div>
        <div class="grid-callback">
            <a href="resources">
                <div class="callback-icon-container">
                    <svg xmlns="http://www.w3.org/2000/svg" class="callback-icon bi bi-journal-code" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M8.646 5.646a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L10.293 8 8.646 6.354a.5.5 0 0 1 0-.708zm-1.292 0a.5.5 0 0 0-.708 0l-2 2a.5.5 0 0 0 0 .708l2 2a.5.5 0 0 0 .708-.708L5.707 8l1.647-1.646a.5.5 0 0 0 0-.708z"/>
                        <path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z"/>
                        <path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z"/>
                    </svg>
                </div>
                <div class="callback-content">
					<div>Check out the sources that built this website</div>
                </div>
            </a>
        </div>
    </div>
</div>


<h1> 3 core Elements </h1>
<hr />
<div class="row pl-3 pt-1 pb-3 fs-5">
    <div class="d-flex flex-column w-100">   
        <div class="d-flex">
            <ul class="nav nav-tabs active nav-fill flex-grow-1" id="myTab" role="tablist">
              <li class="nav-item active d-flex flex-grow-1" role="presentation">
                <button class="nav-link active flex-grow-1" id="toggler-tab" data-bs-toggle="tab" data-bs-target="#toggler" type="button" role="tab" aria-controls="toggler" aria-selected="true"><h4>Toggler</h4></button>
              </li>
              <li class="nav-item active d-flex flex-grow-1" role="presentation">
                <button class="nav-link flex-grow-1" id="anchor-tab" data-bs-toggle="tab" data-bs-target="#anchor" type="button" role="tab" aria-controls="anchor" aria-selected="false"><h4>Anchor</h4></button>
              </li>
              <li class="nav-item active d-flex flex-grow-1" role="presentation">
                <button class="nav-link flex-grow-1" id="markup-tab" data-bs-toggle="tab" data-bs-target="#markup" type="button" role="tab" aria-controls="markup" aria-selected="false"><h4>Markup Container</h4></button>
              </li>
            </ul>
        </div>
        <div class="d-flex flex-column">
            <div class="tab-content pt-1 pb-3 border border-grey rounded-bottom" id="myTabContent">
              <div class="tab-pane fade show active row flex-column justify-content-center" id="toggler" role="tabpanel" aria-labelledby="toggler-tab">
			        <div class="row flex-column flex-fill mx-5 mt-2">
                        <h3>Definition</h3><br/>
                        <p class="card-text"><strong>The Toggler</strong> is the UI button that allows the user to display - or not - the helpful tips hidden across your website. It should be placed somewhere visible and accessible.</p>
                    </div>
                    <div class="row flex-column flex-fill mx-5 mt-2"><hr />
                        <h3>Razor syntax</h3><br/>
                        <div >
                            <pre><code class="language-cshtml"> 
&lt;div class='top-row px-4'&gt;
    &lt;a href='http://blazor.net' target='_blank' class='ml-md-auto'&gt;About&lt;/a&gt;
    &lt;div&gt;
        &lt;ToolTipToggler HelperText='This is the toggler, click it!'&gt;&lt;/ToolTipToggler&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </code></pre>
                        </div>
                    </div>
                    <div class="row flex-column flex-fill mx-5 mt-2"><hr />
                        <h3>Renders as </h3><br/>
                        <div>
                            <div class="top-row px-4">
                                <a href="http://blazor.net" target="_blank" class="ml-md-auto">About</a>
                                <div>
                                    <ToolTipToggler HelperText=" This is the toggler, click it!"></ToolTipToggler>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row flex-column flex-fill mx-5 mt-2"><hr />
                        <h3>The parameters</h3><br/>
                        
                        <ToolTipAnchor HelperAlwaysDisplayable=true HighlightInlineContentWhenActive=false>
                            <InlineContent>
                            <div >
                                <pre><code class="language-csharp"> 
// Always shows the Helper on hover
[Parameter] public bool HelperAlwaysDisplayable { get; set; } = true;
// Uses default styling to highlight content (if none passed as CustomCssClass)
[Parameter] public bool HighlightInlineContentWhenActive { get; set; } = true; 
// The inline content to replace the default icon
[Parameter] public RenderFragment ChildContent { get; set; } 
// The helper text passed as string
[Parameter] public string HelperText { get; set; } = string.Empty; 
// Or as a RenderFragment if you are creative
[Parameter] public RenderFragment? Helper { get; set; } = null; 
// the inline content when the helper is a render fragment
[Parameter] public RenderFragment? InlineContent { get; set; } = null; 
// Customize the child content
[Parameter] public string CustomCssClass { get; set; } = string.Empty; 
// Customize the helper content when active
[Parameter] public string CustomHelperCssClass { get; set; } = string.Empty; 
                                </code></pre>
                            </div>
                            </InlineContent>
                            <HelperContent>
                                <div>
                                    <h4>For Example :</h4>
                                    <div>
                                        <pre><code class="language-csharp"> 
            &lt;ToolTipToggler HelperText="Display Tips for the page"&gt;Help&lt;/ToolTipAnchor&gt;
                                        </code></pre>
                                    </div>
                                    <h4>but :</h4>
                                    <div>
                                        <pre><code class="language-csharp"> 
        &lt;ToolTipAnchor&gt;
            &lt;InlineContent&gt;&lt;img src="_content/ToolTips/fr.svg" width=32/&gt;&lt;/InlineContent&gt;
            &lt;HelperContent&gt;
                Display Tips for the page 
            &lt;/HelperContent&gt;
        &lt;/ToolTipAnchor&gt;
                                        </code></pre>
                                    </div>
                                </div>
                            </HelperContent>
                    
                        </ToolTipAnchor>
                    </div>
              </div>
              <div class="tab-pane fade row flex-column justify-content-center" id="anchor" role="tabpanel" aria-labelledby="anchor-tab">
			        <div class="row flex-column flex-fill mx-5 mt-2">
                        <h3>Description</h3><br/>
                        <p class="card-text"><strong>The anchors</strong> wrap the actual elements for which you want to provide additional help. They are inline components that, when hovered, provide additional context or tips to better your users experience. They can be scattered across your website, about wherever you want.</p>
                    </div>
                    <div class="row flex-column flex-fill mx-5 mt-2"><hr />
                        <h3>Razor syntax</h3><br/>
                        <div >
                            <pre><code class="language-cshtml"> 
&lt;p&gt;Lorem ipsum dolor sit amet, &lt;ToolTipAnchor HelperText="This content seems like latin, but it's gibberish"&gt;
Lorem ipsum dolor sit amet, &lt;/ToolTipAnchor&gt;consectetur adipiscing elit. Integer vehicula scelerisque purus a ultricies. &lt;/p&gt;
                            </code></pre>
                        </div>
                    </div>
                    <div class="row flex-column flex-fill mx-5 mt-2"><hr />
                        <h3>Renders as </h3><br/>
                        <div><p>Lorem ipsum dolor sit amet, <ToolTipAnchor HelperText="This content sounds like latin, but it's gibberish">Lorem ipsum dolor sit amet,</ToolTipAnchor> consectetur adipiscing elit. Integer vehicula scelerisque purus a ultricies. </p></div>
                        <div class="row flex-column flex-shrink-1 mx-3 mt-2"><hr />
                    </div>
                    <h3>The parameters</h3><br/>
                        <ToolTipAnchor HelperAlwaysDisplayable=true HighlightInlineContentWhenActive=false>
                            <InlineContent>
                        <div>
                            <pre><code class="language-csharp"> 
        // Always shows the Helper on hover
        [Parameter] public bool HelperAlwaysDisplayable { get; set; } = false;
        // Uses default styling to highlight content (if none passed as CustomCssClass)
        [Parameter] public bool HighlightInlineContentWhenActive { get; set; } = true; 
        // Customize the helper content when active
        [Parameter] public string CustomHelperCssClass { get; set; } = string.Empty; 
        // The inline content you want to explain
        [Parameter] public RenderFragment ChildContent { get; set; } 
        // The helper text passed as string
        [Parameter] public string HelperText { get; set; } = string.Empty; 
        // Or as a RenderFragment if you are creative
        [Parameter] public RenderFragment? Helper { get; set; } = null; 
        // Customize the child content when active
        [Parameter] public string CustomCssClass { get; set; } = string.Empty; 
        // Customize the helper content when active
        [Parameter] public string CustomHelperCssClass { get; set; } = string.Empty; 
                            </code></pre>
                        </div>
                        </InlineContent>
                        <HelperContent>
                            <div>
                                <h4>For Example :</h4>
                                <div>
                            <pre><code class="language-csharp"> 
&lt;ToolTipAnchor HelperText="From France"&gt;Hello World !&lt;/ToolTipAnchor&gt;
                                </code></pre>
                            </div>
                            <h4>but :</h4>
                            <div>
                                <pre><code class="language-csharp"> 
&lt;ToolTipAnchor&gt;
    &lt;InlineContent>Hello World !&lt;/InlineContent&gt;
    &lt;HelperContent&gt;
        From France &lt;img src="/fr.svg" width=20/&gt; 
    &lt;/HelperContent&gt;
&lt;/ToolTipAnchor&gt;
                                </code></pre>
                            </div>
                            </div>
                        </HelperContent>
                    
                        </ToolTipAnchor>
                    </div>
                </div>
              <div class="tab-pane fade row flex-column justify-content-center" id="markup" role="tabpanel" aria-labelledby="markup-tab">
			        <div class="row flex-column flex-fill mx-5 mt-2">
                        <h3>Description</h3><br/>
                       <p class="card-text"><strong>The MarkupContainer</strong> allows you to keep using tooltips on dynamic content, that you retrieved from your database, because not everything on a website is static content This element can wrap a blog post that you already formated before storing away, or localized markup strings, and provide the same fonctionalities as static ToolTipAnchors.</p>
                    </div>
                    <div class="row flex-column flex-fill mx-5 mt-2"><hr />
                        <h3>Razor syntax</h3><br/>
                        <div >
                            <pre><code class="language-cshtml"> 

&lt;ToolTips.ToolTipsMarkupContainer&gt;
		@@contentMarkup
&lt;/ToolTips.ToolTipsMarkupContainer&gt;
                            </code></pre>
                        </div>
                    </div>
                    <div class="row flex-column flex-fill mx-5 mt-2"><hr />
                        <h3>The parameters</h3><br/>
                        <div >
                            <pre><code class="language-csharp"> 
[Parameter] public RenderFragment ChildContent { get; set; } // The inline content always displayed
        
                            </code></pre>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row pl-3 pt-1 pb-3 fs-5">
    <h3> But really just one </h3>
</div>
<div class="row pl-3">

</div>
@code {
    protected override async Task OnAfterRenderAsync(bool firstRender){
        await js.InvokeVoidAsync("Prism.highlightAll");
    }
}